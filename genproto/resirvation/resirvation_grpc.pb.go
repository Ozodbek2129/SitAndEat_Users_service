// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.18.0
// source: SitAndEat_protos/resiervation_protos/resirvation.proto

package resirvation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Resirvation_CreateRestaurant_FullMethodName  = "/resirvation.Resirvation/CreateRestaurant"
	Resirvation_GetAllRestaurants_FullMethodName = "/resirvation.Resirvation/GetAllRestaurants"
	Resirvation_GetRestuarant_FullMethodName     = "/resirvation.Resirvation/GetRestuarant"
	Resirvation_UpdateRestuarant_FullMethodName  = "/resirvation.Resirvation/UpdateRestuarant"
	Resirvation_DeleteRestuarant_FullMethodName  = "/resirvation.Resirvation/DeleteRestuarant"
)

// ResirvationClient is the client API for Resirvation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResirvationClient interface {
	CreateRestaurant(ctx context.Context, in *Restuarant, opts ...grpc.CallOption) (*Status, error)
	GetAllRestaurants(ctx context.Context, in *AllRestuarant, opts ...grpc.CallOption) (*Restuanants, error)
	GetRestuarant(ctx context.Context, in *RestuanantId, opts ...grpc.CallOption) (*GetRes, error)
	UpdateRestuarant(ctx context.Context, in *GetRes, opts ...grpc.CallOption) (*Status, error)
	DeleteRestuarant(ctx context.Context, in *RestuanantId, opts ...grpc.CallOption) (*Status, error)
}

type resirvationClient struct {
	cc grpc.ClientConnInterface
}

func NewResirvationClient(cc grpc.ClientConnInterface) ResirvationClient {
	return &resirvationClient{cc}
}

func (c *resirvationClient) CreateRestaurant(ctx context.Context, in *Restuarant, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, Resirvation_CreateRestaurant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resirvationClient) GetAllRestaurants(ctx context.Context, in *AllRestuarant, opts ...grpc.CallOption) (*Restuanants, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Restuanants)
	err := c.cc.Invoke(ctx, Resirvation_GetAllRestaurants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resirvationClient) GetRestuarant(ctx context.Context, in *RestuanantId, opts ...grpc.CallOption) (*GetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRes)
	err := c.cc.Invoke(ctx, Resirvation_GetRestuarant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resirvationClient) UpdateRestuarant(ctx context.Context, in *GetRes, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, Resirvation_UpdateRestuarant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resirvationClient) DeleteRestuarant(ctx context.Context, in *RestuanantId, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, Resirvation_DeleteRestuarant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResirvationServer is the server API for Resirvation service.
// All implementations must embed UnimplementedResirvationServer
// for forward compatibility
type ResirvationServer interface {
	CreateRestaurant(context.Context, *Restuarant) (*Status, error)
	GetAllRestaurants(context.Context, *AllRestuarant) (*Restuanants, error)
	GetRestuarant(context.Context, *RestuanantId) (*GetRes, error)
	UpdateRestuarant(context.Context, *GetRes) (*Status, error)
	DeleteRestuarant(context.Context, *RestuanantId) (*Status, error)
	mustEmbedUnimplementedResirvationServer()
}

// UnimplementedResirvationServer must be embedded to have forward compatible implementations.
type UnimplementedResirvationServer struct {
}

func (UnimplementedResirvationServer) CreateRestaurant(context.Context, *Restuarant) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRestaurant not implemented")
}
func (UnimplementedResirvationServer) GetAllRestaurants(context.Context, *AllRestuarant) (*Restuanants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRestaurants not implemented")
}
func (UnimplementedResirvationServer) GetRestuarant(context.Context, *RestuanantId) (*GetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestuarant not implemented")
}
func (UnimplementedResirvationServer) UpdateRestuarant(context.Context, *GetRes) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRestuarant not implemented")
}
func (UnimplementedResirvationServer) DeleteRestuarant(context.Context, *RestuanantId) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRestuarant not implemented")
}
func (UnimplementedResirvationServer) mustEmbedUnimplementedResirvationServer() {}

// UnsafeResirvationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResirvationServer will
// result in compilation errors.
type UnsafeResirvationServer interface {
	mustEmbedUnimplementedResirvationServer()
}

func RegisterResirvationServer(s grpc.ServiceRegistrar, srv ResirvationServer) {
	s.RegisterService(&Resirvation_ServiceDesc, srv)
}

func _Resirvation_CreateRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Restuarant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResirvationServer).CreateRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resirvation_CreateRestaurant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResirvationServer).CreateRestaurant(ctx, req.(*Restuarant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resirvation_GetAllRestaurants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllRestuarant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResirvationServer).GetAllRestaurants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resirvation_GetAllRestaurants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResirvationServer).GetAllRestaurants(ctx, req.(*AllRestuarant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resirvation_GetRestuarant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestuanantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResirvationServer).GetRestuarant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resirvation_GetRestuarant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResirvationServer).GetRestuarant(ctx, req.(*RestuanantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resirvation_UpdateRestuarant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResirvationServer).UpdateRestuarant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resirvation_UpdateRestuarant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResirvationServer).UpdateRestuarant(ctx, req.(*GetRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resirvation_DeleteRestuarant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestuanantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResirvationServer).DeleteRestuarant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resirvation_DeleteRestuarant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResirvationServer).DeleteRestuarant(ctx, req.(*RestuanantId))
	}
	return interceptor(ctx, in, info, handler)
}

// Resirvation_ServiceDesc is the grpc.ServiceDesc for Resirvation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Resirvation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resirvation.Resirvation",
	HandlerType: (*ResirvationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRestaurant",
			Handler:    _Resirvation_CreateRestaurant_Handler,
		},
		{
			MethodName: "GetAllRestaurants",
			Handler:    _Resirvation_GetAllRestaurants_Handler,
		},
		{
			MethodName: "GetRestuarant",
			Handler:    _Resirvation_GetRestuarant_Handler,
		},
		{
			MethodName: "UpdateRestuarant",
			Handler:    _Resirvation_UpdateRestuarant_Handler,
		},
		{
			MethodName: "DeleteRestuarant",
			Handler:    _Resirvation_DeleteRestuarant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "SitAndEat_protos/resiervation_protos/resirvation.proto",
}
